# lecture 1 + 2

cpu has a control unit and an arithmentic unit

registers live in the control unit

system bus has the cpu, disk control, usb controller, graphics, memory

everything but the memory controller is competing for memory cycles

## OS contains the system programs which contains middleware which contains the kernel
this donut interacts with the application programs
which in turn operates with the user
OS has the scheduler/timesharing program

timesharing is when stuff happens

## IoT is OSless, sometimes, bc it's so resource-contrained
so what does the scheduling? you don't really need it, it only does one thing
low level code stuff from the dev to do timesharing manually

## systemd aka system daemons - bootstrap
loads outside kernel into memory at boot time
run the entire time in the background
OS waits for an event (interrupt)

## interrupt
run code out of order
between OS and hardware. sends signal to CPU via system bus
CPU stops what it's doing and transfers execution to location
location might be starting address of the service routine for the interrupt
then CPU continues what it was doing
jargon: device controller *raises* an interrupt by asserting a signal
  on the interrupt request line, the CPU *catches* the interrupt
  and *dispatches* it to the interrupt handler
  handler *clears* the interrupt by servicing the device
maskable can be turned off during CPU's critical processing

## multiprogramming
what if the OS could do multiple things. seems important
OS keeps multiple processes in memory at the same time, CPU switches
CPU scheduling, disk storage, memory management, comms and sync - OS problems

## dual mode/multimode
seperate execution of the OS code and user-defined code by hardware support
sudo vs user. mode bit 0 vs 1. segregates malicious programs
hardware support
intel processors with 4 protection rings (0 kernel, 3 user)
virtualization -> user < VMM < kernel
(this is still after bootstrap)
Q: in what way is this implemented via hardware
it's both
Q: are the rings physical or an abstraction
hardware?

virtualization is multiple OS instances on one machine - hardware
containerization runs a single OS on one machine with multiple user spaces - software

## OS is the cop
terminates programs run by a user in a memory address they shouldn't have
"abnormal termination" and writing a memory dump
it's not exhaustive

## OS is the timekeeper
timer counts down until it's the OS's control, might give user process more time
HZ specifies frequency of timer interrupts
jiffies counts the timer interrupts since boot
if you compile from source you can tweak stuff

## ethics, for some reason
integrity! trust! accountability! transparency! fairness! respect! rule of law! viability!

# lecture three FREE SOFTWAAAAAARE!!!!!!!!

FREE AS IN FREEDOM
NOT FREE AS IN BEER

## im furious i missed the unix philosophy lecture

bin is the essential user command binaries
boot is the static files of the boot loader
dev is the device files
etc is the host specific ststem config
home is user home dir
lib is shared libraries
media is removable media
mnt is mounted filesystem
opt is the add on app software package
sbin is system binaries
srv is data for service from system
tmp is temporary files
usr is user utilities and application
proc is process information

# lecture three
## installs
sudo apt instal to install a new software package
apt search to search for a package

sudo apt update
sudo apt list --upgradable
sudo apt upgrade
man su
info su for GNU online docs
help su for built in commands

cool kids use scp instead of ftp, i guess
mailx to read or send email [run sudo apt install mailutils]
wget downloads from internet
curl goes to/from server
TODO: install mailx

cmp compare byte by byte
comm line by line
diff [line by line, arguments]
sdiff side by side
diff3 three files

chmod u+rw-x students.txt
chmod g-rw+x students.txt
chmod o-rx+w students.txt

-rw---x-w-
chmod 612 students.txt

wc uses -m for characters and w for words and l for lines

## ssh
to log in with user and password, you have to exist in etc/passwd
[ you already have an account ]
to log in via ssh public key, you have to exist in home/user/.ssh/authorized_keys
[ you have an account and the sysadmin likes you ]

chmod +r-wx
chmod 400 key-ame.pem
chmod u+r-wx,g-rwx,o-rwx key-name.pen

## AWS bullstuff
hover over green dot and click it, end up on AWS dashboard
DO NOT USE MORE THAN THE HUNDRED DOLLAR CREDIT
DO NOT ACCIDENTALLY RUN YOUR ML WORKLOADS OVER HERE
we are not going to owe amazon $10,000.

EC2 is either in recent visited or you have to search for it

key pair -> create key pair
give it a name
RSA key pair type
.pem default
create key pair
downloads private key

start with ubuntu or they'll explode you with their mind
ubuntu server 24.04 lts etc etc free tier
do t2.micro 

choose the key pair you just created

allow ssh traffic from anywhere
don't bother with the storage, 8gb

go back to EC2 Dashboard and back to instances
open the running one once it's running
ip address is gonna change
click connect and follow the instructions

sudo passwd root

# lecture five
use nice to influence process scheduling, higher is nicer
goes from -20 to 19
option -n adds an integer to the default niceness of 10
& at the end sends it to the background
nohup also catches the hang-up signal
script provides a transcript of login session
--log-timing allows you to use scriptreplay to replay session
aspell -c to spell check a file in interactive
uptime / reboot / shutdown
shutdown -h --halt now / halts all processes and powers off

## storage
bzip2, -k to keep original file, -d to decompress
bunzip2 decompress a .bz2 file, -z to compress
compression only helpful for files less than 100 bytes
gzip and gunzip for .gz files
zip and unzip also exist
source code or english compresses 60-70% on average
tar also exists, -c creates, -v verbose, -f file name
$ tar -cvf f1.txt.tar f1.txt
tar -xvf to decompress the archive
tar and gzip by default, zip bzip2 might need installs

## system status
df -h for free disk space [storage]
free [free/used main memory]
mebibytes does it in binary kinda. 2^smth
MB megabytes = 1,000,000 bytes
Mb megabits
1 byte = 8 bits
du -h estimate file space useage for a specific file
^ different from ls -l bc it indicates disk space usage not size
env to show environment values
$ finger user to get info
$ ps -ef to see all system processes using standard syntax

## REGEX TIME!!!!!!
grep something | grep something else
is apparently ~equiv to grep 'something\|something else'
grep -i insensitive
grep -e to do regex more directly
grep -f pattern.txt f1.txt
find [where to start] [what to find]
strings to find strings in binary files

$ grep -e '[l-p]' students.txt

$ ls -a | grep -v f1.txt

do cksum to verify your copy worked properly
can also do md5sum
TODO: install calendar
